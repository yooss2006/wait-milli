---
description: 
globs: 
alwaysApply: true
---
## Coding Preferences - Code Style & Quality Standards

### Core Principles
- **Simplicity**: Always prioritize the simplest solution over complexity
- **DRY (Don't Repeat Yourself)**: Avoid code duplication, reuse functionality
- **Organization**: Keep files under 300 lines, refactor when needed
- **Documentation**: After developing key components, modify '/docs/plan.md'

### Import Paths
- Use absolute imports with '@/' prefix for project files
- Group imports by: external → internal → types
- Keep consistent import order across files

### Code Structure
- Use functional, declarative programming (avoid classes)
- Favor composition over inheritance
- Structure files: exports → subcomponents → helpers → types
- Follow naming conventions:
  - Use descriptive names with auxiliary verbs (isLoading, handleClick)
  - Use lowercase with dashes for directories (components/auth-wizard)
  - Prefer named exports for components
- Apply RORO pattern (Receive Object, Return Object)

### JavaScript/TypeScript
- Use "function" keyword for pure functions, omit semicolons
- Prefer interfaces over types, use maps instead of enums
- Minimize conditional syntax:
  - Avoid unnecessary curly braces
  - Omit braces for single-line statements
- Always start with proper TypeScript interfaces/types

### Error Handling
- Handle errors and edge cases first (early returns)
- Place happy path last for better readability
- Avoid nested if statements and unnecessary else blocks
- Use guard clauses for preconditions

### React Components
- Write as functions (not arrow functions stored in constants)
- Use declarative JSX
- Extract static content to variables outside render functions

### React Native 
- When setting styles, avoid using the style props method with JavaScript objects and prefer using StyleSheet whenever possible.
```jsx
import { Text, View, StyleSheet } from "react-native";

export default function Index() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Home screen</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#25292e",
    alignItems: "center",
    justifyContent: "center",
  },
  text: {
    color: "#fff",
  },
});
```
- Use a combination of style props and StyleSheet only when conditional styling is required.
```jsx
 <View
		style={[
		  styles.buttonContainer,
		  { borderWidth: 4, borderColor: '#ffd33d', borderRadius: 18 },
	]}>
```

