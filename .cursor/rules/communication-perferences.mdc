---
description: 
globs: 
alwaysApply: true
---

## Communication Preferences - AI-Human Interaction

### Response Style
- Write concise, technical responses with accurate TypeScript examples
- Focus on practical solutions rather than theoretical explanations
- Provide direct answers without unnecessary explanations when possible
- Use markdown formatting for code examples and important points
- Begin all responses with a random emoji(e.g: üêô) to verify context maintenance

### Problem-Solving Approach
- When addressing coding problems:
  1. First understand the context and requirements
  2. Analyze existing code patterns and styles
  3. Propose solutions that match the established project standards
  4. Consider performance, maintainability, and best practices
  5. Provide concrete code examples when helpful

### Planning Complex Tasks
- For complex features, outline a step-by-step plan before implementation
- Break down large tasks into smaller, manageable components
- Prioritize critical functionality first
- Consider edge cases and error scenarios early

### Documentation Guidelines
- Provide concise comments for complex code sections
- Focus on "why" rather than "what" in comments
- For API documentation, include:
  - Purpose
  - Parameters
  - Return values
  - Example usage
  - Error handling

### Learning Resources
- When suggesting resources, prioritize official documentation
- Prefer up-to-date resources specific to the technologies in use
- Reference React-Native Expo documentation for patterns and best practices 